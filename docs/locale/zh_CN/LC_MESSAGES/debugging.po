# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, VyOS maintainers and contributors
# This file is distributed under the same license as the VyOS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: VyOS 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-08 11:34+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../debugging.rst:5
msgid "Debugging"
msgstr ""

#: ../debugging.rst:7
msgid ""
"There are two flags available to aid in debugging configuration scripts. "
"Since configuration loading issues will manifest during boot, the flags "
"are passed as kernel boot parameters."
msgstr ""

#: ../debugging.rst:12
msgid "ISO image build"
msgstr ""

#: ../debugging.rst:14
msgid ""
"When having trouble compiling your own ISO image or debugging Jenkins "
"issues you can follow the steps at :ref:`iso_build_issues`."
msgstr ""

#: ../debugging.rst:18
msgid "System Startup"
msgstr ""

#: ../debugging.rst:20
msgid ""
"The system startup can be debugged (like loading in the configuration "
"file from ``/config/config.boot``. This can be achieve by extending the "
"Kernel command-line in the bootloader."
msgstr ""

#: ../debugging.rst:25
msgid "Kernel"
msgstr ""

#: ../debugging.rst:27
msgid ""
"``vyos-debug`` - Adding the parameter to the linux boot line will produce"
" timing results for the execution of scripts during commit. If one is "
"seeing an unexpected delay during manual or boot commit, this may be "
"useful in identifying bottlenecks. The internal flag is ``VYOS_DEBUG``, "
"and is found in vyatta-cfg_. Output is directed to ``/var/log/vyatta/cfg-"
"stdout.log``."
msgstr ""

#: ../debugging.rst:33
msgid ""
"``vyos-config-debug`` - During development, coding errors can lead to a "
"commit failure on boot, possibly resulting in a failed initialization of "
"the CLI. In this circumstance, the kernel boot parameter ``vyos-config-"
"debug`` will ensure access to the system as user ``vyos``, and will log a"
" Python stack trace to the file ``/tmp/boot-config-trace``. File ``boot-"
"config-trace`` will generate only if config loaded with a failure status."
msgstr ""

#: ../debugging.rst:42
msgid "Live System"
msgstr ""

#: ../debugging.rst:44
msgid ""
"A number of flags can be set up to change the behaviour of VyOS at "
"runtime. These flags can be toggled using either environment variables or"
" creating files."
msgstr ""

#: ../debugging.rst:48
msgid ""
"For each feature, a file called ``vyos.feature.debug`` can be created to "
"toggle the feature on. If a parameter is required it can be placed inside"
" the file as its first line."
msgstr ""

#: ../debugging.rst:52
msgid ""
"The file can be placed in ``/tmp`` for one time debugging (as the file "
"will be removed on reboot) or placed in '/config' to stay permanently."
msgstr ""

#: ../debugging.rst:55
msgid ""
"For example, ``/tmp/vyos.ifconfig.debug`` can be created to enable "
"interface debugging."
msgstr ""

#: ../debugging.rst:58
msgid ""
"It is also possible to set up the debugging using environment variables. "
"In that case, the name will be (in uppercase) VYOS_FEATURE_DEBUG."
msgstr ""

#: ../debugging.rst:61
msgid ""
"For example running, ``export VYOS_IFCONFIG_DEBUG=\"\"`` on your vbash, "
"will have the same effect as ``touch /tmp/vyos.ifconfig.debug``."
msgstr ""

#: ../debugging.rst:64
msgid ""
"``ifconfig`` - Once set, all commands used, and their responses received "
"from the OS, will be presented on the screen for inspection."
msgstr ""

#: ../debugging.rst:67
msgid ""
"``command`` - Once set, all commands used, and their responses received "
"from the OS, will be presented on the screen for inspection."
msgstr ""

#: ../debugging.rst:70
msgid ""
"``developer`` - Should a command fail, instead of printing a message to "
"the user explaining how to report issues, the python interpreter will "
"start a PBD post-mortem session to allow the developer to debug the "
"issue. As the debugger will wait from input from the developer, it has "
"the capacity to prevent a router to boot and therefore should only be "
"permanently set up on production if you are ready to see the OS fail to "
"boot."
msgstr ""

#: ../debugging.rst:77
msgid ""
"``log`` - In some rare cases, it may be useful to see what the OS is "
"doing, including during boot. This option sends all commands used by VyOS"
" to a file. The default file is ``/tmp/full-log`` but it can be changed."
msgstr ""

#: ../debugging.rst:81
msgid ""
"In order to retrieve the debug output on the command-line you need to "
"disable ``vyos-configd`` in addition. This can be run either one-time by "
"calling ``sudo systemctl stop vyos-configd`` or make this reboot-safe by "
"calling ``sudo systemctl disable vyos-configd``."
msgstr ""

#: ../debugging.rst:87
msgid "FRR"
msgstr ""

#: ../debugging.rst:89
msgid ""
"Recent versions use the ``vyos.frr`` framework. The Python class is "
"located inside our ``vyos-1x:python/vyos/frr.py``. It comes with an "
"embedded debugging/ (print style) debugger as vyos.ifconfig does."
msgstr ""

#: ../debugging.rst:93
msgid "To enable debugging just run: ``$ touch /tmp/vyos.frr.debug``"
msgstr ""

#: ../debugging.rst:96
msgid "Debugging Python Code with PDB"
msgstr ""

#: ../debugging.rst:98
msgid ""
"Sometimes it might be useful to debug Python code interactively on the "
"live system rather than a IDE. This can be achieved using pdb."
msgstr ""

#: ../debugging.rst:101
msgid ""
"Let us assume you want to debug a Python script that is called by an op-"
"mode command. After you found the script by looking up the op-mode-"
"defitions you can edit the script in the live system using e.g. vi: ``vi "
"/usr/libexec/vyos/op_mode/show_xyz.py``"
msgstr ""

#: ../debugging.rst:106
msgid ""
"Insert the following statement right before the section where you want to"
" investigate a problem (e.g. a statement you see in a backtrace): "
"``import pdb; pdb.set_trace()`` Optionally you can surrounded this "
"statement by an ``if`` which only triggers under the condition you are "
"interested in."
msgstr ""

#: ../debugging.rst:112
msgid ""
"Once you run ``show xyz`` and your condition is triggered you should be "
"dropped into the python debugger:"
msgstr ""

#: ../debugging.rst:122
msgid ""
"You can type ``help`` to get an overview of the available commands, and "
"``help command`` to get more information on each command."
msgstr ""

#: ../debugging.rst:125
msgid "Useful commands are:"
msgstr ""

#: ../debugging.rst:127
msgid "examine variables using ``pp(var)``"
msgstr ""

#: ../debugging.rst:128
msgid "contine execution using ``cont``"
msgstr ""

#: ../debugging.rst:129
msgid "get a backtrace using ``bt``"
msgstr ""

#: ../debugging.rst:132
msgid "Config Migration Scripts"
msgstr ""

#: ../debugging.rst:134
msgid ""
"When writing a new configuration migrator it may happen that you see an "
"error when you try to invoke it manually on a development system. This "
"error will look like:"
msgstr ""

#: ../debugging.rst:148
msgid ""
"The reason is that the configuration migration backend is rewritten and "
"uses a new form of \"magic string\" which is applied on demand when real "
"config migration is run on boot. When runnint individual migrators for "
"testing, you need to convert the \"magic string\" on your own by:"
msgstr ""

#: ../debugging.rst:158
msgid "Configuration Error on System Boot"
msgstr ""

#: ../debugging.rst:160
msgid ""
"Beeing brave and running the latest rolling releases will sometimes "
"trigger bugs due to corner cases we missed in our design. Those bugs "
"should be filed via Phabricator_ but you can help us to narrow doen the "
"issue. Login to your VyOS system and change into configuration mode by "
"typing ``configure``. Now re-load your boot configuration by simply "
"typing ``load`` followed by return."
msgstr ""

#: ../debugging.rst:166
msgid ""
"You shoudl now see a Python backtrace which will help us to handle the "
"issue, please attach it to the Phabricator_ task."
msgstr ""

#: ../debugging.rst:170
msgid "Boot Timing"
msgstr ""

#: ../debugging.rst:172
msgid ""
"During the migration and extensive rewrite of functionality from Perl "
"into Python a significant increase in the overall system boottime was "
"noticed. The system boot time can be analysed and a graph can be "
"generated in the end which shows in detail who called whom during the "
"system startup phase."
msgstr ""

#: ../debugging.rst:177
msgid ""
"This is done by utilizing the ``systemd-bootchart`` package which is now "
"installed by default on the VyOS 1.3 (equuleus) branch. The configuration"
" is also versioned so we get comparable results. ``systemd-bootchart`` is"
" configured using this file: bootchart.conf_"
msgstr ""

#: ../debugging.rst:182
msgid ""
"To enable boot time graphing change the Kernel commandline and add the "
"folowing string: ``init=/usr/lib/systemd/systemd-bootchart``"
msgstr ""

#: ../debugging.rst:185
msgid "This can also be done permanently by changing ``/boot/grub/grub.cfg``."
msgstr ""

#: ../debugging.rst:188
msgid "Priorities"
msgstr ""

#: ../debugging.rst:190
msgid ""
"VyOS CLI is all about priorities. Every CLI node has a corresponding "
"``node.def`` file and possibly an attached script that is executed when "
"the node is present. Nodes can have a priority, and on system bootup - or"
" any other ``commit`` to the config all scripts are executed from lowest "
"to higest priority. This is good as this gives a deterministic behavior."
msgstr ""

#: ../debugging.rst:196
msgid ""
"To debug issues in priorities or to see what's going on in the background"
" you can use the ``/opt/vyatta/sbin/priority.pl`` script which lists to "
"you the execution order of the scripts."
msgstr ""

